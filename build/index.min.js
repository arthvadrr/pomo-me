(function () {
    'use strict';

    /*
    # Complaints/ TODO Refactor
    ## Utilize state
    ## Refactor to class
    ## Purify functions
    ## MVC refactor. MVC can be fully deployed here
    */
    new Audio("../src/inc/ticking.mp3");
    var $stateView = document.getElementById("stateView");
    var $pomoTimer = document.getElementsByClassName("pomo-timer")[0];
    var $timer = document.getElementById("timer");
    var $start = document.getElementById("start");
    var $reset = document.getElementById("reset");
    var $shortBreak = document.getElementById("shortBreak");
    var $longBreak = document.getElementById("longBreak");
    var $increaseTime = document.getElementById("increaseTime");
    var $decreaseTime = document.getElementById("decreaseTime");
    var $progressBar = document.getElementById("progressBar");
    var isActive = false;
    var dateStarted;
    var delta;
    var startHidden = false;
    var pomoState = "init"; //JS or linter bug resulting in type error. TODO Investigate why I'm having to explicitly force type inference.

    var countdown = function countdown() {};

    var originalTime = 5;
    var startTime = originalTime;
    var remainingTime = originalTime;

    var setPomoState = function setPomoState(state) {
      //TODO Add array of all states and iterate
      var stateMessage = "Ready";
      $pomoTimer.classList.remove("init");
      $pomoTimer.classList.remove("break");
      $pomoTimer.classList.remove("finished");
      $pomoTimer.classList.remove("paused");
      $pomoTimer.classList.remove("active");
      $pomoTimer.classList.remove("break-active");
      $pomoTimer.classList.remove("break-paused");

      switch (state) {
        case "init":
          $pomoTimer.classList.add("init");
          stateMessage = "Ready";
          break;

        case "break":
          $pomoTimer.classList.add("break");
          stateMessage = "Break Time!";
          break;

        case "finished":
          $pomoTimer.classList.add("finished");
          stateMessage = "Time's up!";
          break;

        case "paused":
          $pomoTimer.classList.add("paused");
          stateMessage = "Paused";
          break;

        case "active":
          $pomoTimer.classList.add("active");
          stateMessage = "Active";
          break;

        case "break-active":
          $pomoTimer.classList.add("break-active");
          stateMessage = "Break started!";
          break;

        case "break-paused":
          $pomoTimer.classList.add("break-paused");
          stateMessage = "Paused";
          break;

        default:
          stateMessage = "Ready";
          return;
      }

      createStateElement(stateMessage);
    };

    var createStateElement = function createStateElement(state) {
      while ($stateView.firstChild) {
        $stateView.removeChild($stateView.firstChild);
      }

      var $newState = document.createElement("div");
      var $stateText = document.createTextNode(state);
      $newState.appendChild($stateText);
      $stateView.appendChild($newState);
    };

    var formatTime = function formatTime(seconds) {
      var formattedTime;
      var minutes = Math.floor(seconds / 60);
      var fseconds = seconds % 60;
      var fminutes = minutes % 60;

      if (minutes >= 60) {
        fminutes = 60;
        fseconds = 0;
      }

      var addLeadingZero = function addLeadingZero(_int) {
        return _int < 10 ? "0".concat(_int) : _int;
      };

      fseconds = addLeadingZero(fseconds);
      fminutes = addLeadingZero(fminutes);
      formattedTime = "".concat(fminutes, ":").concat(fseconds);
      return formattedTime;
    };

    var printTimer = function printTimer(print) {
      $timer.innerHTML = print;
      $progressBar.style.strokeDashoffset = updateStrokeDashArrayOffset();
    };

    var updateStrokeDashArrayOffset = function updateStrokeDashArrayOffset() {
      if (remainingTime !== 0) {
        var adjStart = originalTime - 1;
        var adjRemaining = remainingTime - 1;
        return 565.48 - 565.48 * adjRemaining / adjStart;
      }

      return 565.48;
    };

    var adjustTime = function adjustTime(delta) {
      var res = startTime - delta;

      if (res === 0) {
        delta = 0;
        return 0;
      }

      return startTime - delta;
    };

    var onReset = function onReset() {
      onStop();

      if (startHidden) {
        $start.removeAttribute("disabled", true);
      }

      isActive = false;
      $start.innerHTML = "Start";
      $start.setAttribute("aria-pressed", false);
      startTime = originalTime;
      remainingTime = originalTime;
      printTimer(formatTime(remainingTime));
      pomoState = "init";
      setPomoState(pomoState);
    };

    var onTimerZero = function onTimerZero() {
      startHidden = true;
      $start.setAttribute("disabled", true);
      pomoState = "finished";
      setPomoState(pomoState);
    };

    var onStop = function onStop() {
      console.log(pomoState);

      if (pomoState === "break-active") {
        pomoState = "break-paused";
        console.log(pomoState);
      } else {
        pomoState = "paused";
      }

      setPomoState(pomoState);
      isActive = false;
      $start.innerHTML = "Start";
      $start.setAttribute("aria-pressed", false);
      clearInterval(countdown);

      if (remainingTime === 0) {
        onTimerZero();
      } else {
        startTime = remainingTime;
      }
    };

    var onStart = function onStart() {
      if (!isActive) {
        if (pomoState === "break" || pomoState === "break-paused") {
          pomoState = "break-active";
        } else {
          pomoState = "active";
        }

        setPomoState(pomoState);
        isActive = true;
        $start.innerHTML = "Pause";
        $start.setAttribute("aria-pressed", true);
        dateStarted = Date.now();
        countdown = setInterval(function () {
          delta = Math.round((Date.now() - dateStarted) / 1000);
          remainingTime = adjustTime(delta);
          printTimer(formatTime(remainingTime));

          if (remainingTime === 0) {
            onStop();
          }
        }, 100);
      } else if (remainingTime !== 0) {
        onStop();
      }
    };

    var onIncreaseTime = function onIncreaseTime() {
      isActive = false;
      clearInterval(countdown);
      $start.innerHTML = "Start";
      $start.setAttribute("aria-pressed", false);

      if (startTime <= 3300) {
        startTime += 300;
      } else {
        startTime = 3600;
      }

      remainingTime = startTime;
      originalTime = startTime;
      printTimer(formatTime(startTime));
    };

    var onDecreaseTime = function onDecreaseTime() {
      isActive = false;
      clearInterval(countdown);
      $start.innerHTML = "Start";
      $start.setAttribute("aria-pressed", false);

      if (startTime >= 600) {
        startTime -= 300;
      } else {
        startTime = 300;
      }

      remainingTime = startTime;
      originalTime = startTime;
      printTimer(formatTime(startTime));
    };

    var onShortBreak = function onShortBreak() {
      onReset();
      isActive = false;
      clearInterval(countdown);
      $start.innerHTML = "Start";
      $start.setAttribute("aria-pressed", false);
      startTime = 300;
      remainingTime = startTime;
      originalTime = startTime;
      printTimer(formatTime(startTime));
      pomoState = "break";
      setPomoState(pomoState);
    };

    var onLongBreak = function onLongBreak() {
      onReset();
      isActive = false;
      clearInterval(countdown);
      $start.innerHTML = "Start";
      $start.setAttribute("aria-pressed", false);
      startTime = 900;
      remainingTime = startTime;
      originalTime = startTime;
      printTimer(formatTime(startTime));
      pomoState = "break";
      setPomoState(pomoState);
    };

    $start.addEventListener("click", onStart);
    $reset.addEventListener("click", onReset);
    $shortBreak.addEventListener("click", onShortBreak);
    $longBreak.addEventListener("click", onLongBreak);
    $increaseTime.addEventListener("click", onIncreaseTime);
    $decreaseTime.addEventListener("click", onDecreaseTime);
    printTimer(formatTime(remainingTime));

}());
