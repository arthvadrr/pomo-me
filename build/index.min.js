(function () {
  'use strict';

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  /*
  # Complaints/ TODO Refactor
  ## Utilize state
  ## Refactor to class
  ## Purify functions
  ## MVC refactor. MVC can be fully deployed here
  */
  var $timer = document.getElementById("timer");
  var $start = document.getElementById("start");
  var $reset = document.getElementById("reset");
  var $increaseTime = document.getElementById("increaseTime");
  var $decreaseTime = document.getElementById("decreaseTime");
  var isRunning = false;
  var dateStarted;
  var delta; //JS or linter bug resulting in type error. TODO Investigate why I'm having to explicitly force type inference.

  var countdown = function countdown() {};

  var originalTime = 1500;
  var startTime = originalTime;
  var remainingTime = originalTime;

  var formatTime = function formatTime(seconds) {
    var formattedTime;
    var minutes = Math.floor(seconds / 60);
    var fseconds = seconds % 60;
    var fminutes = minutes % 60;

    if (minutes >= 60) {
      fminutes = 60;
      fseconds = 0;
    }

    var addLeadingZero = function addLeadingZero(_int) {
      return _int < 10 ? "0".concat(_int) : _int;
    };

    fseconds = addLeadingZero(fseconds);
    fminutes = addLeadingZero(fminutes);
    formattedTime = "".concat(fminutes, ":").concat(fseconds);
    return formattedTime;
  };

  var printTimer = function printTimer(print) {
    return $timer.innerHTML = print;
  };

  var adjustTime = function adjustTime(delta) {
    var res = startTime - delta;

    if (res === 0) {
      delta = 0;
      return 0;
    }

    return startTime - delta;
  };

  var onReset = function onReset() {
    onStop();
    $start.removeAttribute("disabled", true);
    startTime = originalTime;
    remainingTime = originalTime;
    printTimer(formatTime(remainingTime));
  };

  var onStop = function onStop() {
    isRunning = false;
    $start.innerHTML = "Start";
    clearInterval(countdown);
    startTime = remainingTime;
    console.log(remainingTime);

    if (remainingTime === 0) {
      $start.setAttribute("disabled", true);
    }
  };

  var onStart = function onStart() {
    if (!isRunning) {
      if (remainingTime === 0) {
        remainingTime = startTime;
      }

      isRunning = true;
      $start.innerHTML = "Pause";
      dateStarted = Date.now();
      countdown = setInterval(function () {
        delta = Math.round((Date.now() - dateStarted) / 1000);
        remainingTime = adjustTime(delta);
        printTimer(formatTime(remainingTime));
        console.log(remainingTime);

        if (remainingTime === 0) {
          onStop();
        }
      }, 100);
    } else if (remainingTime != 0) {
      onStop();
    }
  };

  var onIncreaseTime = function onIncreaseTime() {
    isRunning = false;
    clearInterval(countdown);
    $start.innerHTML = "Start";

    if (startTime <= 3300) {
      startTime += 300;
    } else {
      startTime = 3600;
    }

    printTimer(formatTime(startTime));
  };

  var onDecreaseTime = function onDecreaseTime() {
    isRunning = false;
    clearInterval(countdown);
    $start.innerHTML = "Start";

    if (startTime >= 600) {
      startTime -= 300;
      printTimer(formatTime(startTime));
    }
  };

  $start.addEventListener("click", onStart);
  $reset.addEventListener("click", onReset);
  $increaseTime.addEventListener("click", onIncreaseTime);
  $decreaseTime.addEventListener("click", onDecreaseTime);
  printTimer(formatTime(remainingTime));

  function getRes() {
    return _getRes.apply(this, arguments);
  }

  function _getRes() {
    _getRes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var url, response, commits;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              url = "https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits";
              _context.next = 3;
              return fetch(url);

            case 3:
              response = _context.sent;
              _context.next = 6;
              return response.json();

            case 6:
              commits = _context.sent;
              // read response body and parse as JSON
              console.log(commits);
              console.log(commits[0].author.login);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _getRes.apply(this, arguments);
  }

  getRes();

}());
